import importlib
import os
import sys
from PentestTools.result import output_console, output_csv, output_json, output_xml

class PentestTools:
    def __init__(self):
        self.modules = self.discover_modules()

    def discover_modules(self):
        base_dir = os.path.dirname(os.path.abspath(__file__))
        modules_dir = os.path.join(base_dir, 'PentestTools', 'modules')
        modules = [f.replace('.py', '') for f in os.listdir(modules_dir) if f.endswith('.py') and f != '__init__.py']
        print(f"Discovered modules: {modules}")  # Debug: list discovered modules
        return modules

    def load_module(self, module_name):
        #print(f"Attempting to load module: {module_name}")  # Debug: Attempt to load module

        if module_name not in self.modules:
            print(f"Error: Module '{module_name}' is not in the list of discovered modules.")
            return None

        try:
            module = importlib.import_module(f'PentestTools.modules.{module_name}')
            print(f"Module '{module_name}' successfully imported.")  # Debug: Successful import
            if hasattr(module, 'run'):
                #print(f"Module '{module_name}' has a 'run' function.")  # Debug: Check for run function
                return module
            else:
                print(f"Error: Module '{module_name}' does not have a 'run' function.")
                return None
        except ImportError as e:
            print(f"ImportError: {e}")  # Debug: Output error if import fails
            return None
        except Exception as e:
            print(f"Unexpected error while loading module '{module_name}': {e}")  # Debug: Catch any unexpected errors
            return None

    def list_modules(self):
        print("Available modules:")
        for module in self.modules:
            print(f" - {module}")

    def run_module(self, module_name, args):
        module = self.load_module(module_name)
        if module and callable(getattr(module, 'run', None)):
            #print(f"Running module: {module_name}")  # Debug: Indicate module execution
            try:
                results = module.run(args)
                self.output_results(results)
            except Exception as e:
                print(f"Error running module '{module_name}': {e}")
        else:
            print(f"Error: Module '{module_name}' does not have a 'run' function or could not be loaded.")

    def output_results(self, results, formats=('console',)):
        for format in formats:
            if format == 'console':
                output_console(results)
            elif format == 'csv':
                output_csv(results)
            elif format == 'json':
                output_json(results)
            elif format == 'xml':
                output_xml(results)

def main():
    framework = PentestTools()
    if len(sys.argv) < 2:
        print("Usage: python PentestTools.py <module> [module_options]")
        framework.list_modules()
        sys.exit(1)
    
    module_name = sys.argv[1]
    module_args = sys.argv[2:]
    framework.run_module(module_name, module_args)

if __name__ == '__main__':
    main()
