# Copyright 2025 IntegSec LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import dns.resolver
import re
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your check
check_name = "DNS Security Record Check"

# Define the DNS records to check
DNS_RECORDS = {
    "SPF": {"type": "TXT", "lookup": lambda txt: any("v=spf1" in r for r in txt)},
    "DKIM": {"type": "TXT", "lookup": lambda txt: any("v=DKIM1" in r for r in txt)},
    "DMARC": {"type": "TXT", "lookup": lambda txt: any("v=DMARC1" in r for r in txt)},
    "CAA": {"type": "CAA", "lookup": lambda records: bool(records)}
}

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check DNS Security Records (SPF, DKIM, DMARC, CAA)')
    
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target domain')
    group.add_argument('-f', '--target-file', help='Target file with a list of domains')
    
    return parser.parse_args(args)

def check_dns_record(domain, record_type, lookup_function):
    """Perform DNS lookup and check for a specific record."""
    try:
        answers = dns.resolver.resolve(domain, record_type)
        records = [r.to_text() for r in answers]
        return lookup_function(records), records
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.exception.DNSException):
        return False, []

def extract_dmarc_policy(records):
    """Extracts the DMARC policy (p=none, p=quarantine, p=reject) from DMARC records."""
    for record in records:
        match = re.search(r'p=(none|quarantine|reject)', record)
        if match:
            return match.group(1)
    return None

def run(args):
    parsed_args = parse_args(args)
    results = []
    
    # Determine the target(s)
    if parsed_args.target:
        domains = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            domains = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for domain in tqdm(domains, desc="Checking DNS Security Records"):
        try:
            missing_records = {}
            found_records = {}

            # Check each DNS security record
            for record, config in DNS_RECORDS.items():
                found, details = check_dns_record(
                    f"_dmarc.{domain}" if record == "DMARC" else domain, 
                    config["type"], 
                    config["lookup"]
                )

                if found:
                    if record == "DMARC":
                        dmarc_policy = extract_dmarc_policy(details)
                        found_records[record] = f"Policy: {dmarc_policy}" if dmarc_policy else "Policy: Not Set"
                    else:
                        found_records[record] = "Present"
                else:
                    missing_records[record] = "Missing"

            # Determine status
            status = "not vulnerable" if not missing_records else "vulnerable"

            details = {
                "found_records": found_records,
                "missing_records": missing_records
            }

        except Exception as e:
            details = {"error": str(e)}
            status = "error"

        results.append(TestResult(target=domain, check=check_name, status=status, details=details))
    
    return results
