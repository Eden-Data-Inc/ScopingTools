# Copyright 2025 IntegSec, LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import requests
from PentestTools.result import TestResult
from tqdm import tqdm
from urllib.parse import urlparse

# Name your check
check_name = "Security Header Check"

# Define the security headers
SECURITY_HEADERS = {
    "Basic": {
        "Strict-Transport-Security": "Enforces HTTPS, ensuring secure connections and protecting against downgrade attacks.",
        "Content-Security-Policy": "Helps prevent XSS attacks by specifying allowed sources of content.",
        "Referrer-Policy": "Controls the information sent in the Referer header to enhance privacy.",
        "X-Frame-Options": "Prevents clickjacking attacks by disallowing the website to be embedded in an iframe.",
        "X-Content-Type-Options": "Prevents MIME type sniffing, reducing the risk of executing malicious scripts."
    },
    "Comprehensive": {
        "Cache-Control": "Manages caching policies to prevent sensitive information from being stored improperly.",
        "X-XSS-Protection": "Enables the browser's XSS protection filter to block reflected XSS attacks.",
        "Cross-Origin-Embedder-Policy": "Enables better security for embedding resources by controlling cross-origin behavior.",
        "Cross-Origin-Opener-Policy": "Mitigates cross-origin attacks by isolating browsing contexts.",
        "Cross-Origin-Resource-Policy": "Restricts sharing of resources to same-origin or specified origins to avoid data leaks.",
        "Expect-CT": "Allows the enforcement of Certificate Transparency to detect misissued certificates.",
        "Access-Control-Allow-Origin": "Defines which origins can access the resources, helping prevent CORS attacks.",
        "Permissions-Policy": "Restricts access to browser features like geolocation or camera to avoid misuse."
    }
}

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check Security Headers of a Website')
    
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file with a list of URLs')
    
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', required=False, help='Verbose output, useful for debugging')

    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
            
    results = []
    
    # Determine the target(s)
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking Security Headers"):
        try:
            # Ensure hostname has a valid scheme
            parsed_url = urlparse(hostname)
            if not parsed_url.scheme:
                hostname = "https://" + hostname  # Prepend https:// if no scheme is found

            # Send a GET request to the website
            response = requests.get(hostname)
            headers = response.headers

            missing_basic_headers = []
            missing_comprehensive_headers = []

            # Analyze Basic Headers
            for header in SECURITY_HEADERS["Basic"]:
                if header not in headers:
                    missing_basic_headers.append(header)

            # Analyze Comprehensive Headers
            for header in SECURITY_HEADERS["Comprehensive"]:
                if header not in headers:
                    missing_comprehensive_headers.append(header)

            # Determine status
            status = "not vulnerable"  # Default: all headers present
            details = {
                "missing_basic_headers": missing_basic_headers,
                "missing_comprehensive_headers": missing_comprehensive_headers
            }

            if missing_basic_headers or missing_comprehensive_headers:
                status = "vulnerable"  # Missing headers → considered vulnerable

        except requests.exceptions.RequestException as e:            
            details = {"error": str(e)}
            status = "error"

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))
    
    return results
