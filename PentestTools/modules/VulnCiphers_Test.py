import argparse
import ssl
import socket
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "Vulnerable 64-bit Block Ciphers (SWEET32) Scanner"

# Vulnerable 64-bit block ciphers
VULNERABLE_CIPHERS = ["3DES", "DES", "BF", "IDEA"]

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check for Vulnerable 64-bit Block Ciphers (SWEET32)')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Scanning for SWEET32 Vulnerabilities"):
        try:
            context = ssl.create_default_context()
            with socket.create_connection((hostname, 443), timeout=5) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cipher = ssock.cipher()

            if cipher:
                cipher_name = cipher[0]
                
                for vulnerable_cipher in VULNERABLE_CIPHERS:
                    if vulnerable_cipher in cipher_name:
                        status = "vulnerable"
                        details = {
                            "message": "Vulnerable 64-bit Block Cipher Detected (SWEET32)",
                            "cipher_used": cipher_name
                        }
                        break
                else:
                    status = "not vulnerable"
                    details = {
                        "message": "No vulnerable 64-bit block ciphers detected",
                        "cipher_used": cipher_name
                    }
            else:
                status = "error"
                details = {"error": "Unable to determine cipher used"}

        except ssl.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except socket.timeout:
            status = "error"
            details = {"error": "Connection timed out"}
        except Exception as e:
            status = "error"
            details = {"error": str(e)}
        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

