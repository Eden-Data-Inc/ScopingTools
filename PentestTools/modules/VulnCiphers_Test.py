import argparse
import ssl
import socket
from tqdm import tqdm
from PentestTools.result import TestResult

# Name of the check
check_name = "Weak 64-bit Cipher Scan"

weak_ciphers = [
    "DES-CBC3-SHA", "DES-CBC-SHA", "DES-CBC-MD5", "EXP-DES-CBC-SHA", "EXP-DES-CBC-MD5",
    "PSK-3DES-EDE-CBC-SHA", "KRB5-DES-CBC-SHA", "KRB5-DES-CBC-MD5"
]

def parse_args(args):
    parser = argparse.ArgumentParser(description='Scan for weak 64-bit ciphers')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    return parser.parse_args(args)

def test_weak_ciphers(target):
    vulnerable_ciphers = []

    for cipher in weak_ciphers:
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
        try:
            context.set_ciphers(cipher)
            with socket.create_connection((target, 443), timeout=3) as sock:
                with context.wrap_socket(sock, server_hostname=target) as ssock:
                    negotiated_cipher = ssock.cipher()
                    if negotiated_cipher:
                        vulnerable_ciphers.append(negotiated_cipher[0])
                        
        except ssl.SSLError:
            pass  # Ignore failed handshakes
        except (socket.timeout, ConnectionRefusedError):
            details = "error"
            return details

    return vulnerable_ciphers if vulnerable_ciphers else "not vulnerable"

def run(args):
    parsed_args = parse_args(args)
    results = []
    
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results
    
    for hostname in tqdm(hostnames, desc="Scanning for weak ciphers"):
        scan_result = test_weak_ciphers(hostname)
        if scan_result == "error":
            status = "error"
            details = {"error": "Connection failed"}
        else:
            status = "vulnerable" if isinstance(scan_result, list) else scan_result
            details = {"ciphers": scan_result} if isinstance(scan_result, list) else {}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))
    
    return results
