# Copyright 2025 IntegSec LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import ssl
import socket
from PentestTools.result import TestResult
from tqdm import tqdm
import OpenSSL.crypto

# Name your Check
check_name = "Self-Signed and Expired SSL/TLS Certificate Scanner"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check for Self-Signed SSL Certificate')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Scanning for Self-Signed SSL Certificates"):
        try:
            context = ssl.create_default_context()
            context.check_hostname = False  # Disable hostname verification
            #context.verify_mode = ssl.CER  # Disable certificate validation
            with socket.create_connection((hostname, 443), timeout=5) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert(binary_form=True)
        
            x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, cert)
            subject = x509.get_subject()
            issuer = x509.get_issuer()

            if subject.hash() == issuer.hash():
                status = "vulnerable"
                details = {
                    "message": "Self-Signed SSL Certificate Detected",
                    "subject": subject.CN if subject.CN else "Unknown",
                    "issuer": issuer.CN if issuer.CN else "Unknown"
                }
            else:
                status = "not vulnerable"
                details = {
                    "message": "Valid SSL Certificate (Signed by Trusted CA)",
                    "subject": subject.CN if subject.CN else "Unknown",
                    "issuer": issuer.CN if issuer.CN else "Unknown"
                }

        except ssl.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except socket.timeout:
            status = "error" 
            details = {"error": "Connection timed out"}
        except Exception as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

