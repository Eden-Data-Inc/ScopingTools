# Copyright 2025 IntegSec LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import requests
from http.cookies import SimpleCookie
from PentestTools.result import TestResult
from tqdm import tqdm
import re
from urllib.parse import urlparse

# Name your Check
check_name = "Excessive Session Timeout"

# Define what is considered "excessive" (in seconds)
EXCESSIVE_TIMEOUT_THRESHOLD = 3600 * 4

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check if a website has excessive session timeout')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname or URL')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    parser.add_argument('--no-redirect', action='store_true', help='Disable following redirects')
    parser.add_argument('--cookie-name', help='Scan custom cookies')
    return parser.parse_args(args)

def build_url(hostname):
    if not hostname.startswith(('http://', 'https://')):
        return f"http://{hostname}" 
    return hostname

def run(args):
    parsed_args = parse_args(args)
    results = []

    session_cookie_names = {
        "JSESSIONID", "PHPSESSID", "ASP.NET_SessionId", "_session_id", "sid", "session", 
        "_myapp_session", "__Secure-MOZSESSIONID", "AWSALB", "AWSELB", "shibsession",
        "wordpress_logged_in_", "_cfduid", "_ok", "_saml_idp", "_session", "connect.sid",
        "_zsid", "_gitlab_session", "_redmine_session", "_jenkins_session",
        "_next-auth.session-token", "_auth", "_keycloak_session", "_oauth2_proxy",
        "_sso_session", "_lu", "_stripe_sid", "_bc_c_set", "_magento_session",
        "_prestashop_session", "_drupal_session", "_joomla_session", "_laravel_session",
        "_symfony", "_cake_session", "_phoenix_session", "_springsession",
        "_play_session", "_hapijs_session", "_fastify_session", "_meteor_login_token",
        "_keystone.sid", "_strapi_session", "_ghost_session", "_typo3_session",
        "_craft_session", "_october_session", "_mediawiki_session"
    }
    
    if parsed_args.cookie_name:
        session_cookie_names.add(parsed_args.cookie_name)

    if parsed_args.target:
        targets = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            targets = [line.strip() for line in file if line.strip()]
    else:
        return results

    for target in tqdm(targets, desc="Checking Session Timeout"):
        try:
            url = build_url(target)
            response = requests.get(
                url,
                timeout=5,
                verify=False,
                allow_redirects=not parsed_args.no_redirect
            )

            # Check all responses in case of redirects
            if hasattr(response, 'history'):
                all_responses = response.history + [response]
            else:
                all_responses = [response]

            cookies_found = False
            details = {}
            
            for resp in all_responses:
                cookies = resp.headers.get("Set-Cookie", "")
                if cookies:
                    parsed_cookies = SimpleCookie()
                    parsed_cookies.load(cookies)
                    
                    for cookie_name, cookie in parsed_cookies.items():
                        if any(cookie_name.lower().startswith(valid_name.lower()) for valid_name in session_cookie_names):
                            cookies_found = True
                            cookie_test = str(cookie)

                            if "Max-Age" in cookie_test:
                                key_value = re.search(r"Max-Age=([\d.]+)", cookie_test)
                                max_age = int(float(key_value.group(1)))
                                timeout = max_age

                                if timeout > EXCESSIVE_TIMEOUT_THRESHOLD:
                                    status = "vulnerable"
                                    details = {
                                        "message": "Excessive session timeout detected",
                                        "cookie_name": cookie_name,
                                        "timeout_seconds": timeout
                                    }
                                else:
                                    status = "not vulnerable"
                                    details = {
                                        "message": "Session timeout is within a safe range",
                                        "cookie_name": cookie_name,
                                        "timeout_seconds": timeout
                                    }
                                break
                            elif "Expires" in cookie:
                                status = "warning"
                                details = {
                                    "message": "Session timeout uses 'Expires', cannot determine exact timeout",
                                    "cookie_name": cookie_name,
                                    "expires": cookie["Expires"]
                                }
                                break
                            else:
                                # If no Max-Age or Expires, but it's a session cookie
                                status = "vulnerable"
                                details = {
                                    "message": "Session cookie found with no timeout specified (permanent session)",
                                    "cookie_name": cookie_name
                                }
                                break
                    if cookies_found:
                        break

            if not cookies_found:
                status = "warning"
                details = {"message": "No known session cookies found in response"}
                
                # Additional debug info if verbose
                if parsed_args.verbose:
                    details['debug'] = {
                        'response_url': response.url,
                        'status_code': response.status_code,
                        'headers': dict(response.headers)
                    }

        except requests.exceptions.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except requests.exceptions.Timeout:
            status = "error"
            details = {"error": "Connection timed out"}
        except requests.exceptions.RequestException as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=target, check=check_name, status=status, details=details))

    return results

