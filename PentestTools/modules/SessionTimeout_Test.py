import argparse
import requests
from http.cookies import SimpleCookie
from PentestTools.result import TestResult
from tqdm import tqdm
import re

# Name your Check
check_name = "Excessive Session Timeout"

# Define what is considered "excessive" (in seconds)
EXCESSIVE_TIMEOUT_THRESHOLD = 3600 * 4  # 4 hours

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check if a website has excessive session timeout')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking Session Timeout"):
        try:
            response = requests.get(f"http://{hostname}", timeout=5, verify=False)  # Disable certificate validation
            cookies = response.headers.get("Set-Cookie", "")

            if cookies:
                parsed_cookies = SimpleCookie()
                parsed_cookies.load(cookies)
                for cookie_name, cookie in parsed_cookies.items():
                    cookie_test = str(cookie)
                    if "Max-Age" in cookie_test:
                        key_value = re.search(r"Max-Age=([\d.]+)", cookie_test)
                        max_age = int(float(key_value.group(1)))
                        timeout = max_age
                        
                        if timeout > EXCESSIVE_TIMEOUT_THRESHOLD:
                            status = "vulnerable"
                            details = {
                                "message": "Excessive session timeout detected",
                                "cookie_name": cookie_name,
                                "timeout_seconds": timeout
                            }
                        else:
                            status = "not vulnerable"
                            details = {
                                "message": "Session timeout is within a safe range",
                                "cookie_name": cookie_name,
                                "timeout_seconds": timeout
                            }
                        break  # Stop after checking the first session cookie
                    elif "Expires" in cookie:
                        status = "warning"
                        details = {
                            "message": "Session timeout uses 'Expires', cannot determine exact timeout",
                            "cookie_name": cookie_name,
                            "expires": cookie["Expires"]
                        }
                        break
                else:
                    status = "warning"
                    details = {
                        "message": "No session timeout information found in cookies"
                    }
            else:
                status = "warning"
                details = {"message": "No cookies received, cannot determine session timeout"}

        except requests.exceptions.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except requests.exceptions.Timeout:
            status = "error"
            details = {"error": "Connection timed out"}
        except requests.exceptions.RequestException as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

