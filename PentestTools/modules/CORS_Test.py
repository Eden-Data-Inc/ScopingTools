# Copyright 2025 IntegSec, LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import requests
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "Cross-Origin Resource Sharing: Arbitrary Origin Trusted"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check if CORS allows arbitrary origins')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking CORS Policy"):
        try:
            headers = {"Origin": "https://evil.com"}
            response = requests.get(f"https://{hostname}", headers=headers, timeout=5, verify=False)  # Disable certificate validation
            cors_header = response.headers.get("Access-Control-Allow-Origin", "Not Present")

            if cors_header == "*":
                status = "vulnerable"
                details = {
                    "message": "CORS misconfiguration detected (wildcard origin allowed)",
                    "access_control_allow_origin": cors_header
                }
            elif cors_header == "https://evil.com":
                status = "vulnerable"
                details = {
                    "message": "CORS misconfiguration detected (arbitrary origin echoed back)",
                    "access_control_allow_origin": cors_header
                }
            else:
                status = "not vulnerable"
                details = {
                    "message": "CORS policy appears secure",
                    "access_control_allow_origin": cors_header
                }

        except requests.exceptions.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except requests.exceptions.Timeout:
            status = "error"
            details = {"error": "Connection timed out"}
        except requests.exceptions.RequestException as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

