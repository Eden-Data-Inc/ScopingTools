import argparse
import subprocess
from PentestTools.result import TestResult
from tqdm import tqdm

check_name = "Deprecated SSL/TLS Scanner (OpenSSL)"

TLS_TEST_COMMANDS = {
    "TLS 1.0": "openssl s_client -connect {host}:443 -servername {host} -tls1",
    "TLS 1.1": "openssl s_client -connect {host}:443 -servername {host} -tls1_1",
}

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check for Deprecated SSL/TLS using OpenSSL')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run_openssl_check(hostname):
    deprecated_found = []
    errors = []

    for version, cmd in TLS_TEST_COMMANDS.items():
        try:
            result = subprocess.run(cmd.format(host=hostname), shell=True, capture_output=True, text=True, timeout=120)
            if "Secure Renegotiation IS supported" in result.stdout:
                deprecated_found.append(version)
            elif "handshake failure" in result.stderr or "unsupported protocol" or "Unexpected Response" in result.stderr:
                continue 
            else:
                errors.append(f"{version}: Unexpected response ({result.stderr.strip()})")

        except subprocess.TimeoutExpired:
            errors.append(f"{version}: Connection timed out")
        except Exception as e:
            errors.append(f"{version}: {str(e)}")

    if deprecated_found:
        return "vulnerable", {"deprecated_protocols": deprecated_found}
    elif errors:
        return "error", {"errors": errors}
    else:
        return "not vulnerable", {"message": "No deprecated SSL/TLS versions detected"}

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results

    for hostname in tqdm(hostnames, desc="Scanning for Deprecated SSL/TLS"):
        status, details = run_openssl_check(hostname)
        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
