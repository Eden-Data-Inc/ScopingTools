import argparse
import ssl
import socket
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "Deprecated SSL/TLS Scanner"

# Deprecated SSL/TLS versions
DEPRECATED_PROTOCOLS = {
    "SSLv2": ssl.PROTOCOL_SSLv2 if hasattr(ssl, "PROTOCOL_SSLv2") else None,
    "SSLv3": ssl.PROTOCOL_SSLv3 if hasattr(ssl, "PROTOCOL_SSLv3") else None,
    "TLS 1.0": ssl.PROTOCOL_TLSv1,
    "TLS 1.1": ssl.PROTOCOL_TLSv1_1 if hasattr(ssl, "PROTOCOL_TLSv1_1") else None,
}

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check for Deprecated SSL/TLS in Use')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Scanning for Deprecated SSL/TLS"):
            deprecated_found = []
            try:
                with socket.create_connection((hostname, 443), timeout=5) as sock:
                    pass  # If this fails, the host is unreachable

                for proto_name, proto in DEPRECATED_PROTOCOLS.items():
                    if proto is None:
                        continue
            
                    try:
                        context = ssl.SSLContext(proto)
                        with socket.create_connection((hostname, 443), timeout=5) as sock:
                            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                                pass
                
                        deprecated_found.append(proto_name)
                    except ssl.SSLError:
                        continue
                    except Exception:
                        pass

                if deprecated_found:
                    status = "vulnerable"
                    details = {"deprecated_protocols": deprecated_found}
                else:
                    status = "not vulnerable"
                    details = {"message": "No deprecated SSL/TLS versions detected"}

            except Exception as e:
                status = "error"
                details = {"error": str(e)}
 
            results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

