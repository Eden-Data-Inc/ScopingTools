# Copyright 2025 IntegSec, LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import socket
import ssl
from PentestTools.result import TestResult
from tqdm import tqdm

check_name = "Deprecated SSL/TLS Scanner"

TLS_TEST_VERSIONS = {
    "TLS 1.0": ssl.PROTOCOL_TLSv1,
    "TLS 1.1": ssl.PROTOCOL_TLSv1_1,
}

def parse_args(args):
    parser = argparse.ArgumentParser(description='Check for Deprecated SSL/TLS using Python ssl module')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run_ssl_check(hostname):
    deprecated_found = []
    errors = []

    for version, protocol in TLS_TEST_VERSIONS.items():
        try:
            context = ssl.SSLContext(protocol)
            context.set_ciphers('DEFAULT@SECLEVEL=1')
            context.options |= ssl.OP_NO_TLSv1_2 | ssl.OP_NO_TLSv1_3

            with socket.create_connection((hostname, 443), timeout=120) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssl_sock:
                    ssl_sock.do_handshake()

            deprecated_found.append(version)

        except ssl.SSLError as e:
            if "TLSV1_ALERT_PROTOCOL_VERSION" in str(e):
                continue 
            else:
                if "LEGACY_SIGALG_DISALLOWED_OR_UNSUPPORTED" in str(e):
                    deprecated_found.append(version)
                else:
                    errors.append(f"{version}: SSL error ({str(e)})")
        
        except socket.timeout:
            continue
        
        except ConnectionResetError:
            continue

        except Exception as e:
            errors.append(f"{version}: {str(e)}")

    if deprecated_found:
        return "vulnerable", {"deprecated_protocols": deprecated_found}
    elif errors:
        return "error", {"errors": errors}
    else:
        return "not vulnerable", {"message": "No deprecated SSL/TLS versions detected"}

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results

    for hostname in tqdm(hostnames, desc="Scanning for Deprecated SSL/TLS"):
        status, details = run_ssl_check(hostname)
        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
