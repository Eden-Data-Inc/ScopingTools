import argparse
from PentestTools.result import TestResult
import ssl
import socket
from tqdm import tqdm

#Name your Check
check_name = "TLSv1.1 in Use"

def parse_args(args):
    parser = argparse.ArgumentParser(description='TLSv1.1 Test')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', required=False, help='Verbose output, useful for debugging')
    return parser.parse_args(args)


def run(args):
    parsed_args = parse_args(args)
    
    results = []
    
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Processing hostnames"):
        target = parsed_args.target
        port = 443  # Default HTTPS port
        
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_1)
        context.verify_mode = ssl.CERT_NONE
        
        try:
            with socket.create_connection((target, port)) as sock:
                with context.wrap_socket(sock, server_hostname=target) as ssock:
                    #print(f"TLSv1.1 is supported on {target}:{port}")                
                    results.append(TestResult(target=hostname, check=check_name, status="vulnerable", details={"protocol": "TLSv1.1"}))
        except ssl.SSLError as e:
            #print(f"TLSv1.1 is not supported on {target}:{port}")        
            results.append(TestResult(target=hostname, check=check_name, status="not vulnerable", details={"protocol": "TLSv1.1", "error": str(e)}))
        except Exception as e:
            #print(f"An error occurred while testing {target}:{port}")
            results.append(TestResult(target=hostname, check=check_name, status="error", details={"error": str(e)}))
        
    return results
