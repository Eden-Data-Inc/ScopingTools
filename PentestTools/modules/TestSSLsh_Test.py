import argparse
import subprocess
import json
from PentestTools.result import TestResult
from tqdm import tqdm

#Name your Check
check_name = "testssl.sh Scan"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Run testssl.sh via Docker')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', required=False, help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
            
    results = []
    
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Running testssl.sh"):
        try:
            command = f"docker run --rm drwetter/testssl.sh --json {hostname}"
            process = subprocess.run(command, shell=True, capture_output=True, text=True)

            if process.returncode == 0:
                output_lines = process.stdout.split("\n")
                json_output = None
                for line in output_lines[::-1]:
                    try:
                        json_output = json.loads(line)
                        break
                    except json.JSONDecodeError:
                        continue
                
                if json_output:
                    status = "success"
                    details = json_output
                else:
                    status = "error"
                    details = {"message": "Failed to parse testssl.sh JSON output"}
            else:
                status = "error"
                details = {"error": process.stderr.strip()}

        except Exception as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
