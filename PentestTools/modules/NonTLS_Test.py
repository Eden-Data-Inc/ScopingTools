import argparse
import requests
from PentestTools.result import TestResult
from tqdm import tqdm

#Name your Check
check_name = "Insecure Web Traffic (Non-TLS)"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Owner Info')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', required=False, help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args) 
    results = []
    
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking Insecure Web Traffic"):
        try:
            http_url = f"http://{hostname}"
            response = requests.get(http_url, allow_redirects=True, timeout=5)

            if response.url.startswith("http://"):
                status = "vulnerable"
                details = {
                    "message": "Website does not enforce TLS. Traffic is served over HTTP.",
                    "redirect": False
                }
            else:
                status = "not vulnerable"
                details = {
                    "message": "Website enforces TLS. HTTP traffic is redirected to HTTPS.",
                    "redirect": True,
                    "final_url": response.url
                }

        except requests.exceptions.SSLError as e:
            status = "error"
            details = {"error": f"SSL error: {str(e)}"}
        except requests.exceptions.Timeout:
            status = "error"
            details = {"error": "Connection timed out"}
        except requests.exceptions.RequestException as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
