import argparse
import subprocess
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "SSLv3 Support"

def parse_args(args):
    parser = argparse.ArgumentParser(description='SSLv3 Check')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname (with optional :port)')
    group.add_argument('-f', '--target-file', help='Target file with one host[:port] per line')
    # Custom Argument
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def check_sslv3(hostname, verbose=False):
    try:
        if ':' in hostname:
            host, port = hostname.split(':')
        else:
            host, port = hostname, '443'

        # Command to test SSLv3 support using OpenSSL
        cmd = [
            "openssl", "s_client",
            "-connect", f"{host}:{port}",
            "-ssl3"
        ]

        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=10)
        output = result.stdout.decode() + result.stderr.decode()

        if "unknown option" in output or "handshake failure" in output or "no protocols available" in output:
            return "not vulnerable", {"message": "SSLv3 not supported"}
        elif "CONNECTED" in output:
            return "vulnerable", {"message": "SSLv3 is supported!"}
        else:
            return "error", {"message": "Unexpected response", "output": output}
    except Exception as e:
        return "error", {"error": str(e)}

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking SSLv3"):
        try:
            status, details = check_sslv3(hostname, verbose=parsed_args.verbose)
        except Exception as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
