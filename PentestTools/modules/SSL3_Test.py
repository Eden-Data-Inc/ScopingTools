import argparse
import subprocess
from PentestTools.result import TestResult
from tqdm import tqdm

check_name = "SSLv3 Support"

def parse_args(args):
    parser = argparse.ArgumentParser(description='SSLv3 Check using sslscan')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname (with optional :port)')
    group.add_argument('-f', '--target-file', help='Target file with one host[:port] per line')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def check_sslv3(hostname, verbose=False):
    try:
        if ':' in hostname:
            host, port = hostname.split(':')
        else:
            host, port = hostname, '443'

        cmd = ['sslscan', '--ssl3', '--no-failed', f'{host}:{port}']
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60)
        output = result.stdout.decode().lower()

        if "sslv3" in output:
            # If SSLv3 appears anywhere in output, check for accepted or refused
            if "accepted" in output or "enabled" in output:
                return "vulnerable", {"message": "SSLv3 is supported!"}
            else:
                return "not vulnerable", {"message": "SSLv3 not supported (present but no accepted ciphers)"}
        else:
            return "error", {"message": "SSLv3 result not found in output", "output": output}

    except subprocess.TimeoutExpired:
        return "error", {"error": "sslscan timed out after 60 seconds"}
    except Exception as e:
        return "error", {"error": str(e)}


def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results

    for hostname in tqdm(hostnames, desc="Checking SSLv3"):
        try:
            status, details = check_sslv3(hostname, verbose=parsed_args.verbose)
        except Exception as e:
            status = "error"
            details = {"error": str(e)}

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results
