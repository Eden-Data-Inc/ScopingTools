import argparse
import ssl
import socket
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "Wildcard Certificate Scanner"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Scan for Wildcard Certificates')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    group.add_argument('-f', '--target-file', help='Target file')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    results = []

    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Scanning Wildcard Certificates"):
        try:
            context = ssl.create_default_context()
            with socket.create_connection((hostname, 443), timeout=5) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
            subject_alt_names = [entry[1] for entry in cert.get('subjectAltName', [])]
            wildcard_domains = [entry for entry in subject_alt_names if entry.startswith("*.")]

            if wildcard_domains:
                status = "vulnerable"
                details = {"wildcard_cert": True, "wildcard_domains": wildcard_domains}
            else:
                status = "not vulnerable"
                details = {"wildcard_cert": False, "message": "No wildcard certificates found"}

        except Exception as e:
            status = "error"
            details = {"error": str(e)} 

        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))

    return results

