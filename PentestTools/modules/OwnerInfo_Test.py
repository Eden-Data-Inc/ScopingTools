import argparse
import socket
from ipwhois import IPWhois
from PentestTools.result import TestResult
from tqdm import tqdm

# Name your Check
check_name = "Owner Info"

def parse_args(args):
    parser = argparse.ArgumentParser(description='Owner Info')
    # Standard Parameters (DO NOT MODIFY)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target', help='Target hostname')
    # Custom Argument (CUSTOMIZE TO YOUR MODULE's NEEDS)
    group.add_argument('-f', '--target-file', help='Target file')
    parser.add_argument('-v', '--verbose', required=False, help='Verbose output, useful for debugging')
    return parser.parse_args(args)

def run(args):
    parsed_args = parse_args(args)
    
    results = []
    
    if parsed_args.target:
        hostnames = [parsed_args.target]
    elif parsed_args.target_file:
        with open(parsed_args.target_file, 'r') as file:
            hostnames = [line.strip() for line in file if line.strip()]
    else:
        return results  # No targets provided, return empty results

    for hostname in tqdm(hostnames, desc="Checking Ownership"):
        try:
            ip = socket.gethostbyname(hostname)
            obj = IPWhois(ip)
            as_info = obj.lookup_rdap()
            
            asn = as_info.get('asn', 'N/A')
            asn_description = as_info.get('asn_description', 'N/A')
            
            details = {
                "IP Address": ip,
                "AS Number": asn,
                "AS Owner": asn_description
            }
            status = "success"
        
        except socket.gaierror:
            details = {"error": "DNS resolution failed"}
            status = "fail"
        
        except Exception as e:
            details = {"error": str(e)}
            status = "fail"
        
        results.append(TestResult(target=hostname, check=check_name, status=status, details=details))
    
    return results
