# Copyright 2025 IntegSec LLC

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
# is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import json
from colorama import init, Fore, Style
from prettytable import PrettyTable


class TestResult:
    def __init__(self, target, status, check, details=None):
        self.target = target
        self.status = status
        self.check = check
        self.details = details or {}

    def to_dict(self):
        return {
            "target": self.target,
            "status": self.status,
            "check": self.check,
            "details": self.details
        }

def output_console(results):
    for result in results:
        # Determine color based on status
        if result.status == "Success":
            status_color = Fore.GREEN
        elif result.status == "Fail":
            status_color = Fore.RED
        else:
            status_color = Fore.YELLOW

        # Print the formatted and colorized output
        print(
            f"Target: {Fore.CYAN}{result.target}{Style.RESET_ALL}, "
            f"Check: {Fore.MAGENTA}{result.check}{Style.RESET_ALL}, "
            f"Status: {status_color}{result.status}{Style.RESET_ALL}, "
            f"Details: {Fore.WHITE}{result.details}{Style.RESET_ALL}"
        )
        
def output_table(results):
    table = PrettyTable()
    table.field_names = ["Target", "Check", "Status", "Details"]
    
    for result in results:
        details = json.dumps(result.details)
        if result.status == "Success":
            status_color = Fore.GREEN
        elif result.status == "Fail":
            status_color = Fore.RED
        else:
            status_color = Fore.YELLOW
        
        table.add_row([
            f"{Fore.CYAN}{result.target}{Style.RESET_ALL}",
            f"{Fore.MAGENTA}{result.check}{Style.RESET_ALL}",
            f"{status_color}{result.status}{Style.RESET_ALL}",
            f"{Fore.WHITE}{details}{Style.RESET_ALL}"
        ])
    
    print(table)

def output_csv(results):
    #print("Exporting to CSV format...")
    #print("target,check,status,details")
    for result in results:
        details = json.dumps(result.details)
        print(f"{result.target},{result.check},{result.status},{details}")

def output_json(results):
    #print("Exporting to JSON format...")
    json_results = [result.to_dict() for result in results]
    print(json.dumps(json_results, indent=2))

def output_xml(results):
    #print("Exporting to XML format...")
    for result in results:
        details = "".join([f"<{key}>{value}</key>" for key, value in result.details.items()])
        print(f"<result><target>{result.target}</target><check>{result.check}</check><status>{result.status}</status><details>{details}</details></result>")